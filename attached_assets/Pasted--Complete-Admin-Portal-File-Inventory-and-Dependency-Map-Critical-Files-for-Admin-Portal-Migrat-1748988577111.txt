# Complete Admin Portal File Inventory and Dependency Map

## Critical Files for Admin Portal Migration

### Core Admin Dashboard Components
```
client/src/components/admin/
├── ModernAdminDashboard.tsx                # Main admin interface with 12 tabs
├── CentralizedContentManager.tsx          # Multimedia upload and content management
├── AdminLayout.tsx                        # Admin portal layout wrapper
├── CosmicConsciousnessEngine.tsx         # Advanced consciousness features
├── QuantumConsciousnessEngine.tsx        # Quantum consciousness system
├── IntegratedSecurityDashboard.tsx       # Security monitoring interface
├── LiveAnalyticsDashboard.tsx            # Real-time analytics dashboard
├── ContentPerformanceTracker.tsx         # Content performance analytics
├── EnhancedSacredContentOracle.tsx       # Content generation system
└── AdminErrorBoundary.tsx                # Error handling for admin components
```

### Server-Side Infrastructure
```
server/
├── routes/
│   ├── admin-stats.ts                    # Admin statistics API endpoints
│   ├── content-management.ts             # Content management API routes
│   ├── direct-admin-data.ts              # Direct PostgreSQL database access
│   ├── public-admin-stats.ts             # Public admin statistics
│   ├── simple-admin.ts                   # Simplified admin routes
│   ├── admin-api.ts                      # Enhanced admin API routes
│   ├── basic-auth.ts                     # Basic authentication routes
│   ├── emergency-login.ts                # Emergency access routes
│   └── audit-security.ts                 # Security audit routes
├── middleware/
│   ├── admin-auth.ts                     # Admin authentication middleware
│   ├── security-monitoring.ts            # Security event monitoring
│   ├── caching-middleware.ts             # Performance caching layer
│   ├── health-monitoring.ts              # System health monitoring
│   └── holistic-security.ts              # Comprehensive security middleware
├── database-init.ts                      # Database initialization and seeding
├── storage.ts                            # Database storage interface
└── replitAuth.ts                         # Replit authentication integration
```

### Database Schema Files
```
shared/
├── schema.ts                             # Main database schema definitions
├── content-schema.ts                     # Content management schema
└── admin-types.ts                        # TypeScript type definitions
```

### Client-Side Infrastructure
```
client/src/
├── hooks/
│   ├── useAuth.ts                        # Authentication hook
│   └── useTheme.ts                       # Theme management hook
├── lib/
│   ├── directDbClient.ts                 # Direct database client
│   ├── queryClient.ts                    # TanStack Query client
│   └── authUtils.ts                      # Authentication utilities
├── components/ui/                        # Shadcn UI components (all required)
└── pages/                               # Application pages
```

## Database Tables Required

### Core Tables
```sql
-- User management
users (id, username, email, password_hash, role, created_at, updated_at)

-- Content system
posts (id, title, content, author_id, category, slug, published, approved)
content_items (id, title, content, content_type, status, target_pages, metadata)
media_assets (id, filename, original_name, mime_type, size, url, alt_text, tags)

-- Content workflow
content_workflow (id, content_id, status, actor_id, action, notes, created_at)

-- Session management
sessions (sid, sess, expire)

-- Newsletter system
subscribers (id, email, name, subscribed_at, active)
newsletters (id, subject, content, sent_at, subscriber_count)

-- E-commerce (if applicable)
products (id, name, description, price, category, in_stock)
orders (id, user_id, total_amount, status, created_at)
order_items (id, order_id, product_id, quantity, price)
```

## Environment Variables Required

### Database Configuration
```env
DATABASE_URL=postgresql://username:password@host:port/database
PGUSER=username
PGPASSWORD=password
PGHOST=localhost
PGPORT=5432
PGDATABASE=database_name
```

### Authentication & Security
```env
SESSION_SECRET=your-super-secure-session-secret
JWT_SECRET=your-jwt-secret-for-tokens
BCRYPT_ROUNDS=12
```

### External API Keys (Optional)
```env
ANTHROPIC_API_KEY=your-anthropic-api-key
YOUTUBE_API_KEY=your-youtube-api-key
OPENAI_API_KEY=your-openai-api-key
```

### Application Settings
```env
NODE_ENV=production
PORT=5000
UPLOAD_DIR=uploads
CORS_ORIGIN=https://your-domain.com
```

## Critical Dependencies

### Production Dependencies
```json
{
  "@anthropic-ai/sdk": "^0.20.0",
  "@neondatabase/serverless": "^0.9.0",
  "@radix-ui/react-*": "^1.0.0",
  "@tanstack/react-query": "^5.0.0",
  "bcrypt": "^5.1.0",
  "drizzle-orm": "^0.30.0",
  "drizzle-zod": "^0.5.0",
  "express": "^4.18.0",
  "express-session": "^1.17.0",
  "jsonwebtoken": "^9.0.0",
  "multer": "^1.4.5",
  "passport": "^0.7.0",
  "pg": "^8.11.0",
  "react": "^18.2.0",
  "react-dom": "^18.2.0",
  "react-dropzone": "^14.2.0",
  "react-hook-form": "^7.50.0",
  "react-markdown": "^9.0.0",
  "typescript": "^5.0.0",
  "zod": "^3.22.0"
}
```

### Development Dependencies
```json
{
  "@types/bcrypt": "^5.0.0",
  "@types/express": "^4.17.0",
  "@types/multer": "^1.4.0",
  "@types/node": "^20.0.0",
  "@types/pg": "^8.10.0",
  "@types/react": "^18.2.0",
  "drizzle-kit": "^0.20.0",
  "tsx": "^4.7.0",
  "vite": "^5.0.0"
}
```

## File Dependencies Map

### Admin Dashboard Dependencies
```
ModernAdminDashboard.tsx
├── directDbClient.ts (database access)
├── useAuth.ts (authentication)
├── useTheme.ts (theming)
├── All Shadcn UI components
├── CosmicConsciousnessEngine.tsx
├── QuantumConsciousnessEngine.tsx
├── IntegratedSecurityDashboard.tsx
├── LiveAnalyticsDashboard.tsx
└── ContentPerformanceTracker.tsx
```

### Content Manager Dependencies
```
CentralizedContentManager.tsx
├── react-dropzone (file uploads)
├── react-hook-form (form handling)
├── react-markdown (content editing)
├── @tanstack/react-query (data fetching)
├── content-management.ts (API routes)
└── content-schema.ts (database schema)
```

### Authentication Dependencies
```
useAuth.ts
├── replitAuth.ts (Replit authentication)
├── authUtils.ts (utility functions)
├── admin-auth.ts (middleware)
└── users table (database)
```

### Database Dependencies
```
directDbClient.ts
├── schema.ts (database schema)
├── content-schema.ts (content schema)
├── DATABASE_URL (environment variable)
└── All database tables
```

## Route Mapping

### Admin API Routes
```
/api/admin/dashboard              # Main dashboard data
/api/admin/users                  # User management
/api/admin/content                # Content management
/api/admin/media                  # Media management
/api/admin/newsletter             # Newsletter management
/api/admin/shop                   # E-commerce management
/api/admin/analytics              # Analytics data
/api/admin/security               # Security monitoring
/api/admin/consciousness          # Consciousness features
/api/admin/quantum                # Quantum features
/api/admin/settings               # System settings
/api/admin/stats/*                # Various statistics
```

### Content Management Routes
```
/api/content-management/upload    # File upload endpoint
/api/content-management/content   # Content CRUD operations
/api/content-management/media     # Media asset management
/api/content-management/workflow  # Content workflow management
```

### Authentication Routes
```
/api/auth/login                   # User login
/api/auth/logout                  # User logout
/api/auth/user                    # Current user info
/api/login                        # Replit OAuth login
/api/logout                       # Replit OAuth logout
/api/callback                     # OAuth callback
```

### Direct Database Routes
```
/api/direct-admin/dashboard       # Direct database dashboard
/api/direct-admin/users           # Direct user data
/api/direct-admin/content         # Direct content data
/api/direct-admin/health          # Database health check
```

## Security Considerations

### Authentication Flow
```
1. User accesses /admin
2. AdminLayout checks authentication via useAuth
3. useAuth queries /api/auth/user
4. Server validates session/token
5. isAdmin middleware checks role permissions
6. Admin dashboard loads with authentic data
```

### Data Security
- All admin routes protected with isAdmin middleware
- PostgreSQL injection prevention via parameterized queries
- File upload validation and sanitization
- Session security with PostgreSQL session store
- CSRF protection enabled
- Rate limiting on admin endpoints

### File Upload Security
```
Multer Configuration:
- File size limit: 10MB
- Allowed types: images, documents, audio, video
- Filename sanitization
- Storage in uploads/ directory
- Security scanning for malicious files
```

## Performance Optimizations

### Caching Strategy
```
- Database query caching via caching-middleware.ts
- React Query for client-side caching
- Session caching in PostgreSQL
- Static asset caching
```

### Database Optimizations
```
- Indexed foreign keys
- Connection pooling
- Query optimization
- Prepared statements
```

## Monitoring and Logging

### Health Monitoring
```
/api/health                       # Application health
/api/admin/health                 # Admin system health
Database health checks
Memory usage monitoring
Error rate tracking
```

### Security Logging
```
logs/security/security.log        # Security events
Authentication attempts
Admin actions
File uploads
Database queries
```

## Deployment Checklist

### Pre-Deployment
- [ ] All environment variables configured
- [ ] Database schema migrated
- [ ] Admin user created
- [ ] File upload directory configured
- [ ] SSL certificates configured
- [ ] Security headers enabled

### Post-Deployment
- [ ] Health checks passing
- [ ] Admin dashboard accessible
- [ ] Authentication working
- [ ] File uploads functional
- [ ] Database connections stable
- [ ] All 12 admin tabs loading

### Monitoring Setup
- [ ] Error tracking configured
- [ ] Performance monitoring active
- [ ] Security logging enabled
- [ ] Database monitoring setup
- [ ] Backup procedures configured

This complete inventory ensures all components, dependencies, and configurations are properly migrated when forking the admin portal system.