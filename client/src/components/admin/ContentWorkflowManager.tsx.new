import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle
} from '@/components/ui/card';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger
} from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Checkbox } from '@/components/ui/checkbox';
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger
} from '@/components/ui/alert-dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu';
import {
  Calendar,
  CheckCircle2,
  Clock,
  Edit,
  Eye,
  FileText,
  Filter,
  MoreHorizontal,
  Plus,
  RefreshCw,
  Search,
  Settings,
  Trash2,
  UserCheck,
  UserPlus,
  Users
} from 'lucide-react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';

// Type definitions
type ContentStatus = 'draft' | 'review' | 'approved' | 'published' | 'changes_requested' | 'archived';

type ContentItem = {
  id: number;
  title: string;
  type: string;
  section: string;
  status: ContentStatus;
  createdBy: number;
  createdAt: string;
  updatedAt: string | null;
  publishedAt: string | null;
  scheduledPublishAt: string | null;
  expiresAt: string | null;
  version: number;
  reviewerIds: number[] | null;
  lastReviewedBy: number | null;
  lastReviewedAt: string | null;
};

type User = {
  id: number;
  username: string;
  email: string;
  role: string;
};

type WorkflowStats = {
  drafts: number;
  inReview: number;
  approved: number;
  published: number;
  changesRequested: number;
  archived: number;
  scheduledForPublishing: number;
  scheduledForArchiving: number;
};

type ReviewFeedback = {
  id: number;
  contentId: number;
  reviewerId: number;
  feedback: string;
  createdAt: string;
  decision: 'approve' | 'request_changes';
};

const statusColors: Record<ContentStatus, string> = {
  draft: 'bg-gray-200 text-gray-800',
  review: 'bg-blue-100 text-blue-800',
  approved: 'bg-green-100 text-green-800',
  published: 'bg-purple-100 text-purple-800',
  changes_requested: 'bg-yellow-100 text-yellow-800',
  archived: 'bg-red-100 text-red-800'
};

export default function ContentWorkflowManager() {
  const [activeTab, setActiveTab] = useState('all');
  const [selectedContentId, setSelectedContentId] = useState<number | null>(null);
  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);
  const [reviewFeedback, setReviewFeedback] = useState('');
  const [reviewDecision, setReviewDecision] = useState<'approve' | 'request_changes'>('approve');
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<ContentStatus | 'all'>('all');
  const [showScheduled, setShowScheduled] = useState(false);
  const queryClient = useQueryClient();
  const { toast } = useToast();

  // Fetch content items
  const { 
    data: contentItems = [], 
    isLoading: isLoadingContent,
    error: contentError,
    refetch: refetchContent
  } = useQuery({ 
    queryKey: ['/api/content-workflow/items'],
    queryFn: async () => {
      try {
        const response = await fetch('/api/content-workflow/items');
        if (!response.ok) {
          throw new Error('Failed to fetch content items');
        }
        return response.json();
      } catch (error) {
        console.error('Error fetching content items:', error);
        return [];
      }
    }
  });

  // Fetch workflow stats
  const { 
    data: stats = {
      drafts: 0,
      inReview: 0,
      approved: 0,
      published: 0,
      changesRequested: 0,
      archived: 0,
      scheduledForPublishing: 0,
      scheduledForArchiving: 0
    },
    isLoading: isLoadingStats
  } = useQuery({ 
    queryKey: ['/api/content-workflow/stats'],
    queryFn: async () => {
      try {
        const response = await fetch('/api/content-workflow/stats');
        if (!response.ok) {
          throw new Error('Failed to fetch workflow stats');
        }
        return response.json();
      } catch (error) {
        console.error('Error fetching workflow stats:', error);
        return {
          drafts: 0,
          inReview: 0,
          approved: 0,
          published: 0,
          changesRequested: 0,
          archived: 0,
          scheduledForPublishing: 0,
          scheduledForArchiving: 0
        };
      }
    }
  });

  // Fetch users for assigning reviewers
  const { 
    data: users = [],
    isLoading: isLoadingUsers
  } = useQuery({ 
    queryKey: ['/api/users'],
    queryFn: async () => {
      try {
        const response = await fetch('/api/users');
        if (!response.ok) {
          throw new Error('Failed to fetch users');
        }
        return response.json();
      } catch (error) {
        console.error('Error fetching users:', error);
        return [];
      }
    }
  });

  // Submit content review mutation
  const submitReviewMutation = useMutation({
    mutationFn: async ({ contentId, feedback, decision }: { contentId: number, feedback: string, decision: 'approve' | 'request_changes' }) => {
      const response = await fetch(`/api/content-workflow/review/${contentId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ feedback, decision })
      });
      
      if (!response.ok) throw new Error('Failed to submit review');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/content-workflow/items'] });
      queryClient.invalidateQueries({ queryKey: ['/api/content-workflow/stats'] });
      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
      
      setReviewDialogOpen(false);
      setReviewFeedback('');
      setReviewDecision('approve');
      
      toast({
        title: "Review submitted",
        description: "Your content review has been submitted successfully",
        variant: "default"
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to submit review: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: "destructive"
      });
    }
  });

  // Update content status mutation
  const updateStatusMutation = useMutation({
    mutationFn: async ({ contentId, status, comments }: { contentId: number, status: ContentStatus, comments?: string }) => {
      const response = await fetch(`/api/content-workflow/status/${contentId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status, comments })
      });
      
      if (!response.ok) throw new Error('Failed to update content status');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/content-workflow/items'] });
      queryClient.invalidateQueries({ queryKey: ['/api/content-workflow/stats'] });
      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
      
      toast({
        title: "Status updated",
        description: "Content status has been updated successfully",
        variant: "default"
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to update status: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: "destructive"
      });
    }
  });

  // Assign reviewer mutation
  const assignReviewerMutation = useMutation({
    mutationFn: async ({ contentId, reviewerId }: { contentId: number, reviewerId: number }) => {
      const response = await fetch(`/api/content-workflow/assign-reviewer/${contentId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ reviewerId })
      });
      
      if (!response.ok) throw new Error('Failed to assign reviewer');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/content-workflow/items'] });
      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });
      
      toast({
        title: "Reviewer assigned",
        description: "Reviewer has been assigned successfully",
        variant: "default"
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to assign reviewer: ${error instanceof Error ? error.message : 'Unknown error'}`,
        variant: "destructive"
      });
    }
  });

  // Filter content items based on active tab, search query, and status filter
  const filteredContentItems = contentItems.filter((item: ContentItem) => {
    // Filter by search query
    const matchesSearch = 
      searchQuery === '' || 
      item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      item.section.toLowerCase().includes(searchQuery.toLowerCase());
    
    // Filter by status
    const matchesStatus = statusFilter === 'all' || item.status === statusFilter;

    // Filter for scheduled items if that filter is enabled
    const matchesScheduled = !showScheduled || item.scheduledPublishAt !== null || item.expiresAt !== null;
    
    // Filter by tab
    const matchesTab = 
      activeTab === 'all' || 
      (activeTab === 'drafts' && item.status === 'draft') ||
      (activeTab === 'in-review' && item.status === 'review') ||
      (activeTab === 'approved' && item.status === 'approved') ||
      (activeTab === 'published' && item.status === 'published') ||
      (activeTab === 'changes-requested' && item.status === 'changes_requested') ||
      (activeTab === 'archived' && item.status === 'archived') ||
      (activeTab === 'scheduled' && (item.scheduledPublishAt !== null || item.expiresAt !== null));
    
    return matchesSearch && matchesStatus && matchesTab && matchesScheduled;
  });

  // Handle initiating a review
  const handleReview = (contentId: number) => {
    setSelectedContentId(contentId);
    setReviewDialogOpen(true);
  };

  // Handle submitting a review
  const handleSubmitReview = () => {
    if (!selectedContentId) return;
    
    submitReviewMutation.mutate({
      contentId: selectedContentId,
      feedback: reviewFeedback,
      decision: reviewDecision
    });
  };

  // Handle assigning a reviewer
  const handleAssignReviewer = (contentId: number, reviewerId: number) => {
    assignReviewerMutation.mutate({ contentId, reviewerId });
  };

  // Handle updating content status
  const handleUpdateStatus = (contentId: number, status: ContentStatus) => {
    updateStatusMutation.mutate({ contentId, status });
  };

  // Format date for display
  const formatDate = (dateString: string | null) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleString();
  };

  // Find username by ID
  const getUsernameById = (userId: number | null) => {
    if (!userId) return 'N/A';
    const user = users.find((u: User) => u.id === userId);
    return user ? user.username : 'Unknown User';
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">Content Workflow Manager</h1>
          <p className="text-muted-foreground">
            Manage content from creation to publication
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => refetchContent()} 
            disabled={isLoadingContent}
          >
            <RefreshCw className={`h-4 w-4 mr-1 ${isLoadingContent ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <Button variant="default" size="sm">
            <Plus className="h-4 w-4 mr-1" />
            New Content
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Draft Content</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.drafts}</div>
            <p className="text-xs text-muted-foreground">
              {stats.drafts === 1 ? 'item' : 'items'} in draft status
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">In Review</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.inReview}</div>
            <p className="text-xs text-muted-foreground">
              {stats.inReview === 1 ? 'item' : 'items'} pending review
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Scheduled</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.scheduledForPublishing}</div>
            <p className="text-xs text-muted-foreground">
              {stats.scheduledForPublishing === 1 ? 'item' : 'items'} scheduled for publishing
            </p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Content Workflow Management</CardTitle>
          <CardDescription>
            Review, approve, and manage content through its lifecycle
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row justify-between gap-4">
              <div className="flex items-center gap-2">
                <div className="relative">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    placeholder="Search content..."
                    className="pl-8 w-[200px] sm:w-[300px]"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>
                <Select value={statusFilter} onValueChange={(value) => setStatusFilter(value as ContentStatus | 'all')}>
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="Filter by status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="draft">Draft</SelectItem>
                    <SelectItem value="review">In Review</SelectItem>
                    <SelectItem value="approved">Approved</SelectItem>
                    <SelectItem value="published">Published</SelectItem>
                    <SelectItem value="changes_requested">Changes Requested</SelectItem>
                    <SelectItem value="archived">Archived</SelectItem>
                  </SelectContent>
                </Select>
                <div className="flex items-center gap-2">
                  <Checkbox
                    id="scheduled-only"
                    checked={showScheduled}
                    onCheckedChange={() => setShowScheduled(!showScheduled)}
                  />
                  <Label htmlFor="scheduled-only" className="text-sm">
                    Scheduled Only
                  </Label>
                </div>
              </div>
            </div>

            <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid grid-cols-4 md:grid-cols-7 lg:grid-cols-8">
                <TabsTrigger value="all">All</TabsTrigger>
                <TabsTrigger value="drafts">Drafts</TabsTrigger>
                <TabsTrigger value="in-review">In Review</TabsTrigger>
                <TabsTrigger value="approved">Approved</TabsTrigger>
                <TabsTrigger value="published">Published</TabsTrigger>
                <TabsTrigger value="changes-requested">Changes Requested</TabsTrigger>
                <TabsTrigger value="archived">Archived</TabsTrigger>
                <TabsTrigger value="scheduled">Scheduled</TabsTrigger>
              </TabsList>
              
              <TabsContent value={activeTab} className="mt-6">
                {isLoadingContent ? (
                  <div className="flex justify-center py-8">
                    <div className="flex items-center gap-2">
                      <RefreshCw className="h-4 w-4 animate-spin" />
                      <span>Loading content...</span>
                    </div>
                  </div>
                ) : contentError ? (
                  <div className="flex justify-center py-8 text-red-500">
                    Error loading content. Please try again.
                  </div>
                ) : filteredContentItems.length === 0 ? (
                  <div className="flex justify-center py-8 text-muted-foreground">
                    No content items found matching the current filters.
                  </div>
                ) : (
                  <ScrollArea className="h-[500px]">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Title</TableHead>
                          <TableHead>Section</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Version</TableHead>
                          <TableHead>Created</TableHead>
                          <TableHead>Updated</TableHead>
                          <TableHead>Schedule</TableHead>
                          <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {filteredContentItems.map((item: ContentItem) => (
                          <TableRow key={`${item.id}-${item.version}`}>
                            <TableCell className="font-medium">{item.title}</TableCell>
                            <TableCell>{item.section}</TableCell>
                            <TableCell>
                              <Badge variant="outline" className={statusColors[item.status]}>
                                {item.status.replace('_', ' ')}
                              </Badge>
                            </TableCell>
                            <TableCell>v{item.version}</TableCell>
                            <TableCell className="text-xs">
                              {formatDate(item.createdAt)}<br />
                              <span className="text-muted-foreground">
                                by {getUsernameById(item.createdBy)}
                              </span>
                            </TableCell>
                            <TableCell className="text-xs">
                              {formatDate(item.updatedAt)}
                            </TableCell>
                            <TableCell className="text-xs">
                              {item.scheduledPublishAt && (
                                <div className="flex items-center gap-1 text-green-600">
                                  <Calendar className="h-3 w-3" />
                                  <span>Publish: {formatDate(item.scheduledPublishAt)}</span>
                                </div>
                              )}
                              {item.expiresAt && (
                                <div className="flex items-center gap-1 text-red-600 mt-1">
                                  <Clock className="h-3 w-3" />
                                  <span>Expires: {formatDate(item.expiresAt)}</span>
                                </div>
                              )}
                              {!item.scheduledPublishAt && !item.expiresAt && 'Not scheduled'}
                            </TableCell>
                            <TableCell className="text-right">
                              <DropdownMenu>
                                <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" className="h-8 w-8 p-0">
                                    <span className="sr-only">Open menu</span>
                                    <MoreHorizontal className="h-4 w-4" />
                                  </Button>
                                </DropdownMenuTrigger>
                                <DropdownMenuContent align="end">
                                  <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                  <DropdownMenuItem
                                    onClick={() => window.open(`/admin/content/${item.id}/view`, '_blank')}
                                  >
                                    <Eye className="h-4 w-4 mr-2" />
                                    View
                                  </DropdownMenuItem>
                                  
                                  {item.status === 'draft' && (
                                    <>
                                      <DropdownMenuItem
                                        onClick={() => window.open(`/admin/content/${item.id}/edit`, '_blank')}
                                      >
                                        <Edit className="h-4 w-4 mr-2" />
                                        Edit
                                      </DropdownMenuItem>
                                      <DropdownMenuItem
                                        onClick={() => handleUpdateStatus(item.id, 'review')}
                                      >
                                        <UserCheck className="h-4 w-4 mr-2" />
                                        Submit for Review
                                      </DropdownMenuItem>
                                    </>
                                  )}
                                  
                                  {item.status === 'review' && (
                                    <>
                                      <DropdownMenuItem
                                        onClick={() => handleReview(item.id)}
                                      >
                                        <FileText className="h-4 w-4 mr-2" />
                                        Review Content
                                      </DropdownMenuItem>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuLabel className="text-xs">Assign Reviewer</DropdownMenuLabel>
                                      {users.slice(0, 5).map((user: User) => (
                                        <DropdownMenuItem
                                          key={user.id}
                                          onClick={() => handleAssignReviewer(item.id, user.id)}
                                        >
                                          <UserPlus className="h-4 w-4 mr-2" />
                                          {user.username}
                                        </DropdownMenuItem>
                                      ))}
                                      {users.length > 5 && (
                                        <DropdownMenuItem
                                          onClick={() => window.open(`/admin/content/${item.id}/assign`, '_blank')}
                                        >
                                          <Users className="h-4 w-4 mr-2" />
                                          View All Users
                                        </DropdownMenuItem>
                                      )}
                                    </>
                                  )}
                                  
                                  {item.status === 'approved' && (
                                    <DropdownMenuItem
                                      onClick={() => handleUpdateStatus(item.id, 'published')}
                                    >
                                      <CheckCircle2 className="h-4 w-4 mr-2" />
                                      Publish Now
                                    </DropdownMenuItem>
                                  )}
                                  
                                  {(item.status === 'published' || item.status === 'approved') && (
                                    <DropdownMenuItem
                                      onClick={() => window.open(`/admin/content/${item.id}/schedule`, '_blank')}
                                    >
                                      <Calendar className="h-4 w-4 mr-2" />
                                      Schedule/Expire
                                    </DropdownMenuItem>
                                  )}
                                  
                                  {item.status !== 'archived' && (
                                    <DropdownMenuItem
                                      onClick={() => handleUpdateStatus(item.id, 'archived')}
                                      className="text-red-600"
                                    >
                                      <Trash2 className="h-4 w-4 mr-2" />
                                      Archive
                                    </DropdownMenuItem>
                                  )}
                                </DropdownMenuContent>
                              </DropdownMenu>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </ScrollArea>
                )}
              </TabsContent>
            </Tabs>
          </div>
        </CardContent>
        <CardFooter className="flex justify-between border-t p-4">
          <div className="text-sm text-muted-foreground">
            Showing {filteredContentItems.length} of {contentItems.length} total items
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={() => window.open('/admin/content-workflow/settings', '_blank')}
          >
            <Settings className="h-4 w-4 mr-2" />
            Workflow Settings
          </Button>
        </CardFooter>
      </Card>

      {/* Content Review Dialog */}
      <AlertDialog open={reviewDialogOpen} onOpenChange={setReviewDialogOpen}>
        <AlertDialogContent className="max-w-md">
          <AlertDialogHeader>
            <AlertDialogTitle>Review Content</AlertDialogTitle>
            <AlertDialogDescription>
              Provide your feedback on this content. Your decision will move the content forward or request changes.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid gap-2">
              <Label htmlFor="review-feedback">Review Feedback</Label>
              <Textarea
                id="review-feedback"
                placeholder="Provide detailed feedback about this content..."
                value={reviewFeedback}
                onChange={(e) => setReviewFeedback(e.target.value)}
                className="min-h-[100px]"
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="review-decision">Decision</Label>
              <Select value={reviewDecision} onValueChange={(value) => setReviewDecision(value as 'approve' | 'request_changes')}>
                <SelectTrigger id="review-decision">
                  <SelectValue placeholder="Select your decision" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="approve">Approve Content</SelectItem>
                  <SelectItem value="request_changes">Request Changes</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleSubmitReview}
              disabled={reviewFeedback.trim().length === 0}
            >
              Submit Review
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}