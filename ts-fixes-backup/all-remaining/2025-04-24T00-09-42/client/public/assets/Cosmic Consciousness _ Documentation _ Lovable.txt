
# Cosmic Web Application - Technical Documentation

## Application Overview
This is a modern web application with a cosmic-themed interface featuring an e-commerce shop, community features, and interactive elements with consistent animations and styling.

## Technology Stack
- **Frontend Framework**: React with TypeScript
- **Styling**: Tailwind CSS with custom theme extensions
- **UI Component Library**: ShadCn UI (customized components)
- **Icons**: Lucide React
- **Animations**: Custom CSS animations and transitions
- **State Management**: React hooks and context

## Core Features

### Shop Features
- **Product Browsing**: Filter and search through product catalog
- **Shopping Cart**: Add, remove, and manage products
- **Collaborative Shopping**: Shop together with friends in real-time
- **Co-Design Studio**: Customize and design cosmic products
- **Voice Commands**: Control shopping experience with voice

### Community Features
- **Featured Content**: Display community content in organized tabs
- **Interactive Elements**: Consistent animations and hover states

## Animation System
The application implements a unified animation system for consistent user experience across all components:

```css
/* Core Animation Classes */
.cosmic-fade-in {
  opacity: 0;
  animation: fadeIn 0.5s ease-out forwards;
}

.cosmic-slide-up {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.5s ease, transform 0.5s ease;
}

.cosmic-slide-up.in {
  opacity: 1;
  transform: translateY(0);
}

.cosmic-scale {
  opacity: 0;
  transform: scale(0.95);
  transition: opacity 0.4s ease, transform 0.4s ease;
}

.cosmic-scale.in {
  opacity: 1;
  transform: scale(1);
}

/* Glassmorphism Effects */
.cosmic-glass {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
}

.cosmic-glass-card {
  background: rgba(20, 20, 30, 0.6);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(155, 135, 245, 0.2);
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  border-radius: 12px;
}

/* Interactive Elements */
.cosmic-hover-glow {
  transition: all 0.3s ease;
}

.cosmic-hover-glow:hover {
  box-shadow: 0 0 15px rgba(155, 135, 245, 0.5);
  transform: translateY(-2px);
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes pulse-gentle {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

.animate-pulse-gentle {
  animation: pulse-gentle 2s infinite ease-in-out;
}
```

## Component Documentation

### Shop Components

#### CosmicFeaturedContent
Displays featured content with animated entrance effects.

```typescript
interface CosmicFeaturedContentProps {
  // No props required
}
```

#### CosmicFeaturedTabContent
Displays content based on selected filter with staggered animations.

```typescript
interface CosmicFeaturedTabContentProps {
  filter: string; // The filter to apply to featured items
}
```

#### EnhancedShopping
Provides enhanced shopping features including collaborative shopping and co-design.

```typescript
interface EnhancedShoppingProps {
  onProductView: (productId: string) => void; // Callback when a product is viewed
  products: Product[]; // Array of available products
}
```

#### SearchBar
Component for searching products in the shop.

```typescript
interface SearchBarProps {
  searchQuery: string; // Current search query
  setSearchQuery: (query: string) => void; // Function to update search query
}
```

#### ShopHeader
Header component for the shop page with search and filter functionality.

```typescript
interface ShopHeaderProps {
  searchQuery: string; // Current search query
  setSearchQuery: (query: string) => void; // Function to update search query
  selectedCategory: string | null; // Currently selected category
  setSelectedCategory: (category: string | null) => void; // Function to update selected category
  categories: string[]; // Available categories
  cartItemCount: number; // Number of items in cart
  setIsCartOpen: (isOpen: boolean) => void; // Function to toggle cart visibility
  handleVoiceAddToCart: (productId: string) => void; // Function to handle voice commands for adding to cart
  handleVoiceFilterCategory: (category: string | null) => void; // Function to handle voice commands for filtering categories
  handleVoiceSearch: (query: string) => void; // Function to handle voice commands for search
}
```

#### VoiceCommands
Component that enables voice control for shopping.

```typescript
interface VoiceCommandsProps {
  onAddToCart: (productId: string) => void; // Function to add product to cart
  onFilterCategory: (category: string | null) => void; // Function to filter by category
  onSearch: (query: string) => void; // Function to perform search
}
```

### Collaborative Shopping Components

#### ChatRoom
Real-time chat interface for collaborative shopping.

```typescript
interface ChatRoomProps {
  username: string; // Current user's username
  roomId: string; // ID of the current room
  messages: RoomMessage[]; // Array of chat messages
  participants: RoomParticipant[]; // Array of room participants
  onSendMessage: (message: string) => void; // Function to send a new message
  onProductView?: (productId: string) => void; // Optional callback when a product is viewed
}
```

#### JoinRoom
Component for joining an existing shopping room.

```typescript
interface JoinRoomProps {
  onJoinRoom: (roomId: string) => void; // Function called when joining a room
  rooms: Room[]; // Available rooms to join
}
```

#### JoinRoomPanel
Panel for displaying room information and joining options.

```typescript
interface JoinRoomPanelProps {
  roomId: string; // ID of the room to join
  username: string; // User's chosen username
  setUsername: (username: string) => void; // Function to update username
  joinRoom: () => void; // Function to join the room
  isCopied: boolean; // Whether room ID has been copied
  copyRoomId: () => void; // Function to copy room ID
}
```

#### MessageInput
Text input for sending messages in the chat.

```typescript
interface MessageInputProps {
  onSendMessage: (message: string) => void; // Function called when message is sent
}
```

#### MessageList
Component for displaying chat messages.

```typescript
interface MessageListProps {
  messages: RoomMessage[]; // Array of messages to display
  username: string; // Current user's username
  onProductView?: (productId: string) => void; // Optional callback when a product is viewed
}
```

#### ChatMessage
Individual message component in the chat.

```typescript
interface ChatMessageProps {
  message: RoomMessage; // Message data to display
  currentUsername: string; // Username of current user
  onProductView?: (productId: string) => void; // Optional callback when a product is viewed
}
```

### UI Components

The application uses a variety of ShadCn UI components that have been customized for the cosmic theme:

- **Avatar**: User profile images and avatars
- **Button**: Interactive buttons with various states
- **Card**: Content containers with glassmorphism effects
- **Dialog**: Modal dialogs for focused interactions
- **Drawer**: Side panels for additional content
- **Input**: Text input fields
- **Badge**: Small status indicators
- **Checkbox**: Selection controls
- **Alert**: User notifications
- **Form**: Form controls and validation
- **Accordion**: Collapsible content sections
- **Carousel**: Scrollable content displays

## Data Types

### Product
```typescript
interface Product {
  id: string;
  name: string;
  price: number;
  description: string;
  image: string;
  category: string;
  backstory?: string;
  inspiration?: string;
}
```

### Room Message
```typescript
interface RoomMessage {
  id: string;
  username: string;
  avatar: string;
  message: string;
  timestamp: Date;
  isSystem?: boolean;
  productRef?: string;
}
```

### Room Participant
```typescript
interface RoomParticipant {
  id: string;
  username: string;
  avatar: string;
  isActive: boolean;
  lastActive: Date;
}
```

### Cart Item
```typescript
interface CartItem {
  product: Product;
  quantity: number;
}
```

### Order
```typescript
interface Order {
  id: string;
  userId: string;
  items: {
    productId: string;
    name: string;
    price: number;
    quantity: number;
    image: string;
  }[];
  total: number;
  status: 'pending' | 'processing' | 'completed' | 'cancelled';
  shippingAddress: ShippingAddress;
  paymentMethod: string;
  createdAt: Date;
}
```

## Styling Guidelines

### Color Palette
- **Primary**: Cosmic purple (#9b87f5)
- **Secondary**: Dark purple (#7E69AB)
- **Background**: Dark space (#1A1F2C)
- **Accent**: Bright blue (#1EAEDB)
- **Text**: Light (#ffffff) and muted (#8E9196)

### Typography
- **Headings**: Orbitron for cosmic titles
- **Body**: Inter for readable content
- **Special**: Space Mono for technical/code elements

### Component Styling Patterns

#### Glassmorphism
Components use backdrop filters and subtle borders to create a glass-like effect that fits the cosmic theme.

#### Text Gradients
Special text uses background gradients with text-transparent and bg-clip-text for an ethereal look.

#### Interactive States
All interactive elements have hover and active states with subtle transitions for better UX.

## Development Guidelines

### Component Creation
- Create small, focused components (under 100 lines)
- Use TypeScript for type safety
- Implement consistent animation patterns
- Follow the cosmic naming convention for related components

### Animation Usage
- Use cosmic-slide-up for entrance animations
- Use cosmic-scale for emphasis animations
- Add .in class after components mount to trigger animations
- Stagger animations for related elements

### Best Practices
- Reuse existing components when possible
- Keep state management simple with React hooks
- Implement responsive designs for all screen sizes
- Use voice commands sparingly and with clear feedback

## Future Enhancement Opportunities
- Implement real-time backend for collaborative features
- Add authentication system for user accounts
- Create admin panel for product management
- Enhance accessibility features
- Add internationalization support

This documentation serves as a comprehensive guide to the application's structure, components, and styling guidelines.
