I'll help you integrate Google Analytics into your analytics system and explain the current analytics setup.

Current Analytics Overview:
Your AnalyticsPage already has a robust analytics system with the following features:

Track active users
Monitor new registrations
Count content reports
Display system health
Generate charts using Chart.js
Export analytics data to CSV
Google Analytics Integration Steps:

Install Google Analytics package:
npm install react-ga4
Update client/src/pages/AnalyticsPage.tsx:
import ReactGA from 'react-ga4';
// Initialize Google Analytics in your main App or _app.tsx
ReactGA.initialize('YOUR_GOOGLE_ANALYTICS_MEASUREMENT_ID');
export default function AnalyticsPage() {
  // Existing code...
  // Track page view when component mounts
  useEffect(() => {
    ReactGA.send({ 
      hitType: 'pageview', 
      page: window.location.pathname 
    });
  }, []);
  // Custom event tracking example
  const trackExportEvent = () => {
    ReactGA.event({
      category: 'User',
      action: 'Exported Analytics',
      label: 'CSV Export'
    });
    exportToCSV(); // Your existing export function
  };
  return (
    // Existing return with added tracking
    <Button onClick={trackExportEvent}>
      Export Analytics
    </Button>
  );
}
Add tracking to key user interactions:
In other pages like [AdminPortalPage.tsx]:
import ReactGA from 'react-ga4';
export default function AdminPortalPage() {
  const handleLogout = async () => {
    ReactGA.event({
      category: 'User',
      action: 'Logout',
      label: 'Admin Portal'
    });
    
    try {
      await logoutMutation.mutateAsync();
      // existing logout logic
    } catch (error) {
      // error handling
    }
  };
  // Rest of the existing code
}
Track user events in ToDoList.tsx:
import ReactGA from 'react-ga4';
const ToDoList: React.FC = () => {
  const addTask = () => {
    ReactGA.event({
      category: 'Task Management',
      action: 'Add Task',
      label: 'New Task Created'
    });
    
    if (task) {
      setToDoList([...toDoList, task]);
      setTask('');
    }
  };
  const completeTask = (taskToComplete: string) => {
    ReactGA.event({
      category: 'Task Management',
      action: 'Complete Task',
      label: 'Task Completed'
    });
    setToDoList(toDoList.filter(t => t !== taskToComplete));
    setCompletedList([...completedList, taskToComplete]);
  };
  // Rest of existing code
}
Integration Benefits:

Track user interactions across the site
Gather insights on user behavior
Monitor page views and user engagement
Create custom events for specific actions
Recommendations:

Use environment variables for the Google Analytics ID
Respect user privacy by implementing opt-out mechanisms
Ensure compliance with data protection regulations
Server-Side Considerations:
Your server/routes.ts already provides robust analytics data. Consider enhancing it with more granular tracking.

Privacy Note:
Implement user consent mechanisms for analytics tracking, respecting user privacy preferences.

Would you like me to elaborate on any part of the Google Analytics integration?